import { Video, Session } from './Types';
import { ApiClient } from './ApiClient';

import { parse } from 'iso8601-duration';
import { askUserChoiche } from './CommandLineParser';


function publishedDateToString(date: string) {
    const dateJs = new Date(date);
    const day = dateJs.getDate().toString().padStart(2, '0');
    const month = (dateJs.getMonth() + 1).toString(10).padStart(2, '0');
    const publishedDate = day + '-' + month + '-' + dateJs.getFullYear();

    return publishedDate;
}

function durationToTotalChunks(duration: string) {
    const durationObj = parse(duration);
    const hrs = durationObj['hours'] ?? 0;
    const mins = durationObj['minutes'] ?? 0;
    const secs = Math.ceil(durationObj['seconds'] ?? 0);

    return (hrs * 60) + mins + (secs / 60);
}

export async function getVideoInfo(videoGuids: string[], session: Session, subtitles: boolean): Promise<Video[]> {
    let metadata: Video[] = [];
    let title: string;
    let date: string;
    let totalChunks: number;
    let playbackUrl: string;
    let posterImage: string;
    let captionsUrl: string | undefined;

    const apiClient = ApiClient.getInstance(session);

    for (const GUID of videoGuids) {
        let response = await apiClient.callApi('videos/' + GUID, 'get');

        if (subtitles) {
            let captions = await apiClient.callApi(`videos/${GUID}/texttracks`, 'get');

            if (!captions?.data.value.length) {
                captionsUrl = undefined;
            }
            else if (captions?.data.value.length === 1) {
                captionsUrl = captions?.data.value.pop().url;
            }
            else {
                const index = askUserChoiche(captions.data.value.map((item: { language: any; autoGenerated: any; }) => {
                    return `[${item.language}] autogenerated: ${item.autoGenerated}`;
                }));
                captionsUrl = captions.data.value[index].url;
            }
        }

        title = response?.data['name'];
        playbackUrl = response?.data['playbackUrls']
            .filter((item: { [x: string]: string; }) =>
                item['mimeType'] == 'application/vnd.apple.mpegurl')
            .map((item: { [x: string]: string }) => {
                return item['playbackUrl'];
            })[0];

        posterImage = response?.data['posterImage']['medium']['url'];
        date = publishedDateToString(response?.data['publishedDate']);
        totalChunks = durationToTotalChunks(response?.data.media['duration']);

        metadata.push({
            date: date,
            totalChunks: totalChunks,
            title: title,
            playbackUrl: playbackUrl,
            posterImage: posterImage,
            captionsUrl: captionsUrl
        });
    }

    return metadata;
}


export function setOutDirectory(videos: Video[], outDir: string[] | string): Video[] {

    videos.forEach((video, index) => {
        video.outDir = (outDir instanceof Array) ? outDir[index] : outDir;
    });

    return videos;
}
